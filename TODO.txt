// TODO -> attention booking on ne voit pas l'user id ni l'annonceid
// utilsier le pattern DTO plus simple (avec stream si possible) voir la doc pour le DTO avec spring
// Stream / DTO / lambda / CompletableFutur
// todo 18/01/2020
// model reservation
// id
// OK sender_id (user id personne qui emet la reservation (Many reservation has one user_id) many booking has one user / one user has many booking
// announce_id (many reservation has one announce) -> permet aussi de recuperer l'id de l'utilisateur // One announce has many booking
// totalPrice // OK
// currency // ok
// coupon_id  -> custom system stripe does not support one off charge coupon ... IMPLEMENTER APRES (secondaire)
// createdAt // ok
// updatedAt // ok
// active // ok
// isConfirmed // ok
// animalsType_id // many to many
// service_id // many to many
// animalsCapacity (nb d'animaux a herberger) // ok



// TODO tresi mportant ET URGENT
// Bug stack overflow sur le post d'une annonce du à la notion de relation
// Pour eviter ça
: https://auth0.com/blog/automatically-mapping-dto-to-entity-on-spring-boot-apis/

// utiliser le pattern DTO : 1 DTO (Data Transfer Object / models) PUIS  dans le service appeler le DTO en retour plutôt que la classe même de l'entité

// announces
// -> add field user_id (one user has many announces)
// si il est pas compte PRO il a le droit qu'à une annonce


// TODO -> creation booking - bill - payment
// TODO -> WIP
// Bookings
- PRIMARY KEY id Long
- uuid (auto generer à la creation)
- creationAt (auto timestamp)
- updatedAt (default null)
- status ( submit / confirmed / cancel) String -> contants (definir dans application.yml) ou constante dans le service liée à Bookings
- statusUpdatedAt Datetime
- service_id (one booking has one service / bidirectionnel ) FK
- announce_id (many booking has one announce / bidirectionnel) FK
- bill_id (one reservation has one bill) FK


// Bills
- PRIMARY key id Long
- uuid (auto generer à la creation)
- creationAt (auto timestamp)
- updatedAt (default null)
- booking_id FK ()
- user id FK


// -> Announces has many bookings
// -> one booking has many bills
// -> one user has many bills




// TODO (2020 list)

// add relation announces <-> user https://docs.jboss.org/hibernate/orm/4.1/manual/en-US/html/ch07.html#collections-bidirectional

// one users has many announces


// +> announces_pictures table -> one announce has many pictures 1 / N
// id
// name String
// extension String
// createdAt Datetime (current timestamp)
// visible (boolean)
// uuid -> auto generated

// add routes postman / local
// allows routes /v1/announces/pictures (post)
// allows routes /v1/announces/pictures/{uuid} (get)


// +> controller -> post -> create picture
//               -> get -> display pictures by id


// create service for upload
// set rules and limit MB for upload in application.yml (to avoid surprises ...)

// Update le dump file dans dev










// docker react app

// Swagger 2 setup : https://openclassrooms.com/fr/courses/4668056-construisez-des-microservices/5123565-documentez-votre-microservice-avec-swagger-2

// makefile -> cmd to generate image on Docker Hub for each micro services implemented (currently we only manage the base API)


// Github CI CD + TEST JUnit ou Spring-test





// QUERY filter

/// jpa :https://www.baeldung.com/spring-data-jpa-query

// E.G QUERY sql : SELECT * FROM announces as a INNER JOIN announces_animals_type as aat ON aat.announces_id = 1 WHERE a.id = 1;


// si on remplace le premier 1 par a.id et on vire le where -> on va recuperer a chaque fois toute les data de l'annonces + announces animals type

// donc nous on va juste faire une query :
// il va falloir faire une double jointure
//@Query("SELECT u FROM Announces u INNER JOIN AnimalsType at on at.announced_id = u.id WHERE at.id = <param> AND at....")
//Collection<Announces> findAllAnnouncesFiltered();




//  select by query params
SELECT
	ann.id as announce_id,
    ann.active as active,
    ann.city as city,
	ann.created_at as created_at,
    ann.dept as dept,
    ann.description as description,
    ann.street_address as street_address,
    ann.title as title,
    ann.updated_at as updated_at,
    ann.uuid as uuid,
    link_services.id as link_services_id,
	link_services.name as link_services_name,
	link_animals_type.id as link_animals_type_id,
    link_animals_type.name as link_animals_type_name
    FROM announces as ann
INNER JOIN services as link_services
ON link_services.id = 1
INNER JOIN animals_type as link_animals_type
ON link_animals_type.id = 1
WHERE ann.dept = 75;
//


// LAST (filter) (e.g for announces by animals type);
SELECT * FROM announces as ann JOIN announces_animals_type as aat on ann.id = aat.announces_id WHERE aat.animals_type_id = 1;


