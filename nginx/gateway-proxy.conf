
worker_processes 1;

events { worker_connections 1024; }

http {

    # load balancer - default alg : Round Robin
    upstream api.v1.dev {
        server spring-boot-jpa-app:4999;
        # can add container in docker compose and add them here on another port
        # exemple copy / paste spring-boot-jpa-app in docker compose and change port (create 2 container) to be ready to accept another request in load balancer
    }

    upstream api.v1.service-messagerie.dev {
        server messagerie-service:3200;
    }

    upstream app.v1.dev {
        server web:3000;
    }

    server {
         listen 4200    ; # nginx port

        # If we use CORS (or simple use configuration from spring cors
         # add the header , to allow web app from another nginx ( port 5200 ) and avoid CORS :  (for prod add domain like : https://www.mydomain.com;)
         # add_header 'Access-Control-Allow-Origin' 'http://localhost:5200';
         # add_header 'Access-Control-Allow-Credentials' 'true';
         # add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
         # add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';


        # application reverse proxy to avoid CORS
         location / {
            proxy_pass http://app.v1.dev/;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
         }

         location /api/ {
         # toutes les requÃªte sur /api son rediriger sur le upstream api (load balancer) et reparti sur les server
            proxy_pass http://api.v1.dev/;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            #proxy_pass http://spring-boot-jpa-app:4999/;
         }

         location /api/service-messagerie/ {
            proxy_pass http://api.v1.service-messagerie.dev/;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
         }

         #location / {
            #proxy_pass http://localhost;
            #proxy_set_header Host $host;
          #}


           #location /service1 {
             #proxy_pass http://springbootservice1:8080/service1/;
           #}
           #location /service2 {
             #proxy_pass http://springbootservice2:8080/service2/;
           #}

         #location / {
          #  proxy_pass http://api;
           # proxy_set_header Host $host:$server_port;
            #proxy_set_header X-Forwarded-Host $server_name;
            #proxy_set_header X-Real-IP $remote_addr;
            #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          #}




         #location /static {
          #        access_log   off;
           #       expires      30d;

            #      alias /app/static;
             # }
    }

}
